import { inject, Injectable} from '@angular/core';
import { User } from './user.model';
import { Observable} from 'rxjs';

import {
  Firestore,
  collection,
  collectionData,
  doc,
  deleteDoc,
  updateDoc,
  docData,
  setDoc,
  query,
  where
} from '@angular/fire/firestore';

@Injectable({
  providedIn: 'root'
})

export class UserService {

  private firestore = inject(Firestore);
  private userCollection = collection(this.firestore, 'users');

  //Get users from the database
  getUsers(): Observable<User[]> {
    return collectionData(this.userCollection, { idField: 'id' }) as Observable<User[]>;
  }

  //Add a new user
  addUser(newUser: User){
   // Create the document reference with auto-generated ID
    const userRef = doc(this.userCollection);
    // Get the document ID generated by Firestore
    const userId = userRef.id;
    //set the new user's id to autogenerated document id
    newUser.id = userId;
    //Set the document data in Firestore
    setDoc(userRef, newUser);
    //If we don't need to assign id to document id then the implementation will the following:
    //addDoc(this.userCollection, newUser);
  }

  // Get single user by ID
  getUserById(id: string): Observable<User> {
    const userDoc = doc(this.firestore, `users/${id}`);
    return docData(userDoc, { idField: 'id' }) as Observable<User>;
  }

  //Get users by name
  getUserByName(name: string): Observable<User[]>{
    const userQuery = query(this.userCollection, where('name', '==', name)) ;
    return collectionData(userQuery, {idField:'id'}) as Observable<User[]>;

  }

  //Delete a user by ID
  deleteUser(id:string){
    const userRef = doc(this.firestore, `users/${id}`);
    deleteDoc(userRef);
  }

  //Updates part of the a user object and not necessarily all fields.
  // Partial<T> makes all properties of a type<User> optional.
  updateUser(id:string, editUser: Partial<User>){
    const userRef = doc(this.firestore, `users/${id}`);
    updateDoc(userRef, editUser);
  }

}
